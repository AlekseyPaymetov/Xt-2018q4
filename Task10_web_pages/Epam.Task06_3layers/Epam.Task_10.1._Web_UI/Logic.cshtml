@using Epam.Task06_3layers.Common;
@using Epam.Task06_3layers.Entities;
@using System.Reflection

@if (IsAjax)
{
    string action = Request.Params["action"];
    DependencyResolves logic = new DependencyResolves();
    string text = string.Empty;
    switch (action)
    {
        case "ShowAllUsers":
            <p>All users:</p>
            foreach (var user in logic.GetAllUsers())
            {
                <span>
                    <br />
                    &nbsp;<img width="64" height="64" src="@user.ImgPath" alt="Your ad could be here"><br />
                    Id: @user.Id
                    Name: @user.Name
                    &nbsp;Age: @user.Age
                    &nbsp;Birth date: @user.DateOfBirth.ToShortDateString()
                </span><br />

                foreach (var userToAward in logic.GetAllUserAwards())
                {
                    if (user.Id == userToAward.IdUser)
                    {
                        int idAward = userToAward.IdAward;
                        foreach (var award in logic.GetAllAwards())
                        {
                            if (award.Id == idAward)
                            {
                                <span>
                                    Has award id: @award.Id
                                    &nbsp;title: @award.Title
                                    &nbsp;<img width="32" height="32" src="@award.ImgPath" alt="Your ad could be here"><br />
                                </span><br />
                            }
                        }
                    }
                }

            }

            break;

        case "AddUser":
            {
                string idStr = Request.Params["id"];
                string name = Request.Params["name"];
                string birthDate = Request.Params["birthDate"];
                string img = Request.Params["img"];
                DateTime dateOfBirth;
                int id;
                if (!int.TryParse(idStr, out id) || !DateTime.TryParse(birthDate, out dateOfBirth))
                {
                    text = "Errors in input";
                    break;
                }

                if (!String.IsNullOrEmpty(img))
                {
                    string base64str = img.Substring(img.IndexOf(',') + 1);
                    byte[] bytes = Convert.FromBase64String(base64str);
                    int startIndex = img.IndexOf('/');
                    int endIndex = img.IndexOf(';');
                    string extension = img.Substring(startIndex + 1, endIndex - startIndex - 1);
                    string fileName = DateTime.Now.Ticks.ToString() + "." + extension;
                    string pathToFile = Path.Combine(@"img\users", fileName);
                    string fullPathToFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, pathToFile);

                    File.WriteAllBytes(fullPathToFile, bytes);
                    if (logic.AddUser(logic.CreateUser(id, name, dateOfBirth, pathToFile)))
                    {
                        text = "User was successfully added";
                    }
                    else
                    {
                        text = "Can't add this user";
                    }
                }
                else
                {
                    if (logic.AddUser(logic.CreateUser(id, name, dateOfBirth)))
                    {
                        text = "User was successfully added";
                    }
                    else
                    {
                        text = "Can't add this user";
                    }
                }
                break;
            }

        case "DeleteUser":
            {
                string idStr = Request.Params["id"];
                int id = int.Parse(idStr);
                if (logic.DeleteUser(id))
                {
                    text = "User was successfully deleted.";
                }
                else
                {
                    text = "Can't delete user with this id.";
                }
                break;
            }
        case "ShowAllAwards":
            {
                <p>All awards:</p>
                foreach (var award in logic.GetAllAwards())
                {
                <span>
                    id: @award.Id
                    &nbsp;title: @award.Title
                    path: @award.ImgPath
                    &nbsp;<img width="32" height="32" src="@award.ImgPath" alt="Your ad could be here">
                </span><br />
                }

                break;
            }
        case "ShowAllAwardsAndUsers":
            {
                <p>All awards and users:</p>
                List<string> awardsAndUsers = logic.GetAllInfoUsersFromAwards();

                foreach (var item in awardsAndUsers)
                {
                    @item;
                    <br />
                }
                break;
            }
        case "AddAward":
            {
                string idStr = Request.Params["id"];
                string title = Request.Params["title"];
                string img = Request.Params["img"];
                int id;
                if (!int.TryParse(idStr, out id))
                {
                    text = "Erroes in input";
                    break;
                }

                if (!String.IsNullOrEmpty(img))
                {
                    string base64str = img.Substring(img.IndexOf(',') + 1);
                    byte[] bytes = Convert.FromBase64String(base64str);
                    int startIndex = img.IndexOf('/');
                    int endIndex = img.IndexOf(';');
                    string extension = img.Substring(startIndex + 1, endIndex - startIndex - 1);
                    string fileName = DateTime.Now.Ticks.ToString() + "." + extension;
                    string pathToFile = Path.Combine(@"img\award", fileName);
                    string fullPathToFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, pathToFile);

                    File.WriteAllBytes(fullPathToFile, bytes);
                    if (logic.AddAward(logic.CreateAward(id, title, pathToFile)))
                    {
                        text = "Award was successfully added.";
                    }
                    else
                    {
                        text = "Can't add this award";
                    }
                }
                else
                {
                    if (logic.AddAward(logic.CreateAward(id, title)))
                    {
                        text = "Award was successfully added.";
                    }
                    else
                    {
                        text = "Can't add this award";
                    }
                }

                break;
            }
        case "DeleteAward":
            {
                string idStr = Request.Params["id"];
                int id;
                if (!int.TryParse(idStr, out id))
                {
                    text = "Erroes in input";
                    break;
                }

                if (logic.DeleteAward(id))
                {
                    text = "Award was successfully deleted.";
                }
                else
                {
                    text = "Can't delete this award";
                }

                break;
            }
        case "AddAwardToUser":
            {
                string idStrU = Request.Params["idU"];
                int idU = int.Parse(idStrU);
                string idStrA = Request.Params["idA"];
                int idA = int.Parse(idStrA);
                if (logic.AddAwardToUser(logic.CreateAwardToUser(idA, idU)))
                {
                    text = "Award to iser was successfully added.";
                }
                else
                {
                    text = "Can't add this award to user";
                }
                break;
            }

        case "DeleteUserAward":
            {
                string idStrU = Request.Params["idU"];
                int idU = int.Parse(idStrU);
                string idStrA = Request.Params["idA"];
                int idA = int.Parse(idStrA);
                if (logic.DeleteAwardToUser(idA, idU))
                {
                    text = "User award was successfully deleted.";
                }
                else
                {
                    text = "Can't delete this user award";
                }
                break;
            }
        case "ChangeUser":
            {
                string oldIdStr = Request.Params["oldId"];
                int oldId = int.Parse(oldIdStr);
                string idStr = Request.Params["id"];
                int id = int.Parse(idStr);
                string name = Request.Params["name"];
                string birthDate = Request.Params["birthDate"];
                DateTime.TryParse(birthDate, out DateTime dateOfBirth);
                if (logic.DeleteUser(oldId))
                {
                    if (logic.AddUser(logic.CreateUser(id, name, dateOfBirth)))
                    {
                        text = "User was successfully changed.";
                    }
                    else
                    {
                        text = "Error! Can't change user with this id. User deleted.";
                    }
                }
                else
                {
                    text = "Can't change user with this id.";
                }

                break;
            }
        case "ChangeAward":
            {
                string oldIdStr = Request.Params["oldId"];
                int oldId = int.Parse(oldIdStr);
                string idStr = Request.Params["id"];
                int id = int.Parse(idStr);
                string title = Request.Params["title"];
                if (logic.DeleteAward(oldId))
                {
                    if (logic.AddAward(logic.CreateAward(id, title)))
                    {
                        text = "Award was successfully changed.";
                    }
                    else
                    {
                        text = "Error! Can't change this award. Award deleted.";
                    }
                }
                else
                {
                    text = "Can't change this award";
                }
                break;
            }
        case "ChangeUserAward":
            {
                string oldUserIdStr = Request.Params["oldUserId"];
                int oldUserId = int.Parse(oldUserIdStr);
                string oldAwardIdStr = Request.Params["oldAwardId"];
                int oldAwardId = int.Parse(oldAwardIdStr);
                string userIdStr = Request.Params["userId"];
                int userId = int.Parse(userIdStr);
                string awardIdStr = Request.Params["awardId"];
                int awardId = int.Parse(awardIdStr);

                if (logic.DeleteAwardToUser(oldAwardId, oldUserId))
                {
                    if (logic.AddAwardToUser(logic.CreateAwardToUser(awardId, userId)))
                    {
                        text = "Award to user was successfully changed.";
                    }
                    else
                    {
                        text = "Error! Can't change this user award. User award was deleted.";
                    }
                }
                else
                {
                    text = "Can't change this user award.";
                }

                break;
            }
        case "DeleteUserAward_v2":
            {
                string idStrU = Request.Params["idU"];
                int idU = int.Parse(idStrU);
                string idStrA = Request.Params["idA"];
                int idA = int.Parse(idStrA);
                if (logic.DeleteAwardFromAllUsers(idA, idU))
                {
                    text = "All awards was successfully deleted.";
                }
                else
                {
                    text = "Can't delete this award from users";
                }
                break;
            }
        default:
            text = "Error in index";
            return;
    }

    if (!String.IsNullOrEmpty(text))
    {
        <span>@text</span>
    }

    return;
}

